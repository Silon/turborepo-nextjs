import { createContext, useMemo, useReducer } from "react";
import { {{camelCase name}}Reducer } from "./{{pascalCase name}}.reducer";
import type { {{pascalCase name}}Actions, {{pascalCase name}}State } from "./{{pascalCase name}}.types";

export const {{pascalCase name}}StateContext = createContext<{{pascalCase name}}State>({} as {{pascalCase name}}State);
export const {{pascalCase name}}ActionsContext = createContext<{{pascalCase name}}Actions>({} as {{pascalCase name}}Actions);

const INITIAL_STATE = {
  count: 0,
};

export function {{pascalCase name}}Provider({
  children,
  initialState = INITIAL_STATE,
}: {
  readonly children: React.ReactNode;
  readonly initialState?: {{pascalCase name}}State;
}) {
  const [state, dispatch] = useReducer({{camelCase name}}Reducer, {
    ...initialState,
  });

  const customAction = async (payload: number) => {
    dispatch({ type: "set", payload });
    await new Promise((resolve) => {
      setTimeout(resolve, 1_000);
    });
    dispatch({ type: "increment" });
  };

  const actionsValue = useMemo(
    (): {{pascalCase name}}Actions => ({
      increment: () => dispatch({ type: "increment" }),
      set: (payload: number) => dispatch({ type: "set", payload }),
      customAction,
    }),
    [],
  );

  return (
    <{{pascalCase name}}StateContext.Provider value={state}>
      <{{pascalCase name}}ActionsContext.Provider value={actionsValue}>{children}</{{pascalCase name}}ActionsContext.Provider>
    </{{pascalCase name}}StateContext.Provider>
  );
}
